/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.moi.dms.audit.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.moi.dms.audit.model.MOIAudit;
import com.moi.dms.audit.model.MOIAuditModel;
import com.moi.dms.audit.model.MOIAuditSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MOIAudit service. Represents a row in the &quot;moi_audit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MOIAuditModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MOIAuditImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MOIAuditImpl
 * @generated
 */
@JSON(strict = true)
public class MOIAuditModelImpl
	extends BaseModelImpl<MOIAudit> implements MOIAuditModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a moi audit model instance should use the <code>MOIAudit</code> interface instead.
	 */
	public static final String TABLE_NAME = "moi_audit";

	public static final Object[][] TABLE_COLUMNS = {
		{"auditId", Types.BIGINT}, {"actionPerformedBy", Types.VARCHAR},
		{"actionPerformedDate", Types.TIMESTAMP},
		{"actionStatus", Types.VARCHAR}, {"actionDescription", Types.VARCHAR},
		{"actionConsumer", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("auditId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("actionPerformedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionPerformedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("actionStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionConsumer", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table moi_audit (auditId LONG not null primary key,actionPerformedBy VARCHAR(75) null,actionPerformedDate DATE null,actionStatus VARCHAR(75) null,actionDescription VARCHAR(75) null,actionConsumer VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table moi_audit";

	public static final String ORDER_BY_JPQL = " ORDER BY moiAudit.auditId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY moi_audit.auditId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ACTIONCONSUMER_COLUMN_BITMASK = 1L;

	public static final long ACTIONDESCRIPTION_COLUMN_BITMASK = 2L;

	public static final long ACTIONPERFORMEDBY_COLUMN_BITMASK = 4L;

	public static final long ACTIONPERFORMEDDATE_COLUMN_BITMASK = 8L;

	public static final long ACTIONSTATUS_COLUMN_BITMASK = 16L;

	public static final long AUDITID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MOIAudit toModel(MOIAuditSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MOIAudit model = new MOIAuditImpl();

		model.setAuditId(soapModel.getAuditId());
		model.setActionPerformedBy(soapModel.getActionPerformedBy());
		model.setActionPerformedDate(soapModel.getActionPerformedDate());
		model.setActionStatus(soapModel.getActionStatus());
		model.setActionDescription(soapModel.getActionDescription());
		model.setActionConsumer(soapModel.getActionConsumer());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MOIAudit> toModels(MOIAuditSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MOIAudit> models = new ArrayList<MOIAudit>(soapModels.length);

		for (MOIAuditSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public MOIAuditModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _auditId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAuditId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _auditId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MOIAudit.class;
	}

	@Override
	public String getModelClassName() {
		return MOIAudit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MOIAudit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MOIAudit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOIAudit, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((MOIAudit)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MOIAudit, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MOIAudit, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MOIAudit)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MOIAudit, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MOIAudit, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MOIAudit>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MOIAudit.class.getClassLoader(), MOIAudit.class,
			ModelWrapper.class);

		try {
			Constructor<MOIAudit> constructor =
				(Constructor<MOIAudit>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MOIAudit, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MOIAudit, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MOIAudit, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MOIAudit, Object>>();
		Map<String, BiConsumer<MOIAudit, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MOIAudit, ?>>();

		attributeGetterFunctions.put("auditId", MOIAudit::getAuditId);
		attributeSetterBiConsumers.put(
			"auditId", (BiConsumer<MOIAudit, Long>)MOIAudit::setAuditId);
		attributeGetterFunctions.put(
			"actionPerformedBy", MOIAudit::getActionPerformedBy);
		attributeSetterBiConsumers.put(
			"actionPerformedBy",
			(BiConsumer<MOIAudit, String>)MOIAudit::setActionPerformedBy);
		attributeGetterFunctions.put(
			"actionPerformedDate", MOIAudit::getActionPerformedDate);
		attributeSetterBiConsumers.put(
			"actionPerformedDate",
			(BiConsumer<MOIAudit, Date>)MOIAudit::setActionPerformedDate);
		attributeGetterFunctions.put("actionStatus", MOIAudit::getActionStatus);
		attributeSetterBiConsumers.put(
			"actionStatus",
			(BiConsumer<MOIAudit, String>)MOIAudit::setActionStatus);
		attributeGetterFunctions.put(
			"actionDescription", MOIAudit::getActionDescription);
		attributeSetterBiConsumers.put(
			"actionDescription",
			(BiConsumer<MOIAudit, String>)MOIAudit::setActionDescription);
		attributeGetterFunctions.put(
			"actionConsumer", MOIAudit::getActionConsumer);
		attributeSetterBiConsumers.put(
			"actionConsumer",
			(BiConsumer<MOIAudit, String>)MOIAudit::setActionConsumer);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAuditId() {
		return _auditId;
	}

	@Override
	public void setAuditId(long auditId) {
		_columnBitmask |= AUDITID_COLUMN_BITMASK;

		if (!_setOriginalAuditId) {
			_setOriginalAuditId = true;

			_originalAuditId = _auditId;
		}

		_auditId = auditId;
	}

	public long getOriginalAuditId() {
		return _originalAuditId;
	}

	@JSON
	@Override
	public String getActionPerformedBy() {
		if (_actionPerformedBy == null) {
			return "";
		}
		else {
			return _actionPerformedBy;
		}
	}

	@Override
	public void setActionPerformedBy(String actionPerformedBy) {
		_columnBitmask |= ACTIONPERFORMEDBY_COLUMN_BITMASK;

		if (_originalActionPerformedBy == null) {
			_originalActionPerformedBy = _actionPerformedBy;
		}

		_actionPerformedBy = actionPerformedBy;
	}

	public String getOriginalActionPerformedBy() {
		return GetterUtil.getString(_originalActionPerformedBy);
	}

	@JSON
	@Override
	public Date getActionPerformedDate() {
		return _actionPerformedDate;
	}

	@Override
	public void setActionPerformedDate(Date actionPerformedDate) {
		_columnBitmask |= ACTIONPERFORMEDDATE_COLUMN_BITMASK;

		if (_originalActionPerformedDate == null) {
			_originalActionPerformedDate = _actionPerformedDate;
		}

		_actionPerformedDate = actionPerformedDate;
	}

	public Date getOriginalActionPerformedDate() {
		return _originalActionPerformedDate;
	}

	@JSON
	@Override
	public String getActionStatus() {
		if (_actionStatus == null) {
			return "";
		}
		else {
			return _actionStatus;
		}
	}

	@Override
	public void setActionStatus(String actionStatus) {
		_columnBitmask |= ACTIONSTATUS_COLUMN_BITMASK;

		if (_originalActionStatus == null) {
			_originalActionStatus = _actionStatus;
		}

		_actionStatus = actionStatus;
	}

	public String getOriginalActionStatus() {
		return GetterUtil.getString(_originalActionStatus);
	}

	@JSON
	@Override
	public String getActionDescription() {
		if (_actionDescription == null) {
			return "";
		}
		else {
			return _actionDescription;
		}
	}

	@Override
	public void setActionDescription(String actionDescription) {
		_columnBitmask |= ACTIONDESCRIPTION_COLUMN_BITMASK;

		if (_originalActionDescription == null) {
			_originalActionDescription = _actionDescription;
		}

		_actionDescription = actionDescription;
	}

	public String getOriginalActionDescription() {
		return GetterUtil.getString(_originalActionDescription);
	}

	@JSON
	@Override
	public String getActionConsumer() {
		if (_actionConsumer == null) {
			return "";
		}
		else {
			return _actionConsumer;
		}
	}

	@Override
	public void setActionConsumer(String actionConsumer) {
		_columnBitmask |= ACTIONCONSUMER_COLUMN_BITMASK;

		if (_originalActionConsumer == null) {
			_originalActionConsumer = _actionConsumer;
		}

		_actionConsumer = actionConsumer;
	}

	public String getOriginalActionConsumer() {
		return GetterUtil.getString(_originalActionConsumer);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, MOIAudit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MOIAudit toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MOIAudit>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MOIAuditImpl moiAuditImpl = new MOIAuditImpl();

		moiAuditImpl.setAuditId(getAuditId());
		moiAuditImpl.setActionPerformedBy(getActionPerformedBy());
		moiAuditImpl.setActionPerformedDate(getActionPerformedDate());
		moiAuditImpl.setActionStatus(getActionStatus());
		moiAuditImpl.setActionDescription(getActionDescription());
		moiAuditImpl.setActionConsumer(getActionConsumer());

		moiAuditImpl.resetOriginalValues();

		return moiAuditImpl;
	}

	@Override
	public int compareTo(MOIAudit moiAudit) {
		int value = 0;

		if (getAuditId() < moiAudit.getAuditId()) {
			value = -1;
		}
		else if (getAuditId() > moiAudit.getAuditId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MOIAudit)) {
			return false;
		}

		MOIAudit moiAudit = (MOIAudit)object;

		long primaryKey = moiAudit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalAuditId = _auditId;

		_setOriginalAuditId = false;

		_originalActionPerformedBy = _actionPerformedBy;

		_originalActionPerformedDate = _actionPerformedDate;

		_originalActionStatus = _actionStatus;

		_originalActionDescription = _actionDescription;

		_originalActionConsumer = _actionConsumer;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MOIAudit> toCacheModel() {
		MOIAuditCacheModel moiAuditCacheModel = new MOIAuditCacheModel();

		moiAuditCacheModel.auditId = getAuditId();

		moiAuditCacheModel.actionPerformedBy = getActionPerformedBy();

		String actionPerformedBy = moiAuditCacheModel.actionPerformedBy;

		if ((actionPerformedBy != null) && (actionPerformedBy.length() == 0)) {
			moiAuditCacheModel.actionPerformedBy = null;
		}

		Date actionPerformedDate = getActionPerformedDate();

		if (actionPerformedDate != null) {
			moiAuditCacheModel.actionPerformedDate =
				actionPerformedDate.getTime();
		}
		else {
			moiAuditCacheModel.actionPerformedDate = Long.MIN_VALUE;
		}

		moiAuditCacheModel.actionStatus = getActionStatus();

		String actionStatus = moiAuditCacheModel.actionStatus;

		if ((actionStatus != null) && (actionStatus.length() == 0)) {
			moiAuditCacheModel.actionStatus = null;
		}

		moiAuditCacheModel.actionDescription = getActionDescription();

		String actionDescription = moiAuditCacheModel.actionDescription;

		if ((actionDescription != null) && (actionDescription.length() == 0)) {
			moiAuditCacheModel.actionDescription = null;
		}

		moiAuditCacheModel.actionConsumer = getActionConsumer();

		String actionConsumer = moiAuditCacheModel.actionConsumer;

		if ((actionConsumer != null) && (actionConsumer.length() == 0)) {
			moiAuditCacheModel.actionConsumer = null;
		}

		return moiAuditCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MOIAudit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MOIAudit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOIAudit, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((MOIAudit)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MOIAudit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MOIAudit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOIAudit, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MOIAudit)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MOIAudit>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _auditId;
	private long _originalAuditId;
	private boolean _setOriginalAuditId;
	private String _actionPerformedBy;
	private String _originalActionPerformedBy;
	private Date _actionPerformedDate;
	private Date _originalActionPerformedDate;
	private String _actionStatus;
	private String _originalActionStatus;
	private String _actionDescription;
	private String _originalActionDescription;
	private String _actionConsumer;
	private String _originalActionConsumer;
	private long _columnBitmask;
	private MOIAudit _escapedModel;

}