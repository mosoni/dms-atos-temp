/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.moi.dms.consumer.registration.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import com.moi.dms.consumer.registration.model.ConsumerRegistration;
import com.moi.dms.consumer.registration.model.ConsumerRegistrationModel;
import com.moi.dms.consumer.registration.model.ConsumerRegistrationSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ConsumerRegistration service. Represents a row in the &quot;dms_consumer_registration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ConsumerRegistrationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConsumerRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConsumerRegistrationImpl
 * @generated
 */
@JSON(strict = true)
public class ConsumerRegistrationModelImpl
	extends BaseModelImpl<ConsumerRegistration>
	implements ConsumerRegistrationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a consumer registration model instance should use the <code>ConsumerRegistration</code> interface instead.
	 */
	public static final String TABLE_NAME = "dms_consumer_registration";

	public static final Object[][] TABLE_COLUMNS = {
		{"registrationId", Types.BIGINT}, {"consumerId", Types.VARCHAR},
		{"consumerName", Types.VARCHAR}, {"consumerDescription", Types.VARCHAR},
		{"supportedDocumentType", Types.VARCHAR},
		{"consumerStatus", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("registrationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("consumerId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("consumerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("consumerDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("supportedDocumentType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("consumerStatus", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dms_consumer_registration (registrationId LONG not null primary key,consumerId VARCHAR(75) null,consumerName VARCHAR(75) null,consumerDescription STRING null,supportedDocumentType VARCHAR(75) null,consumerStatus VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table dms_consumer_registration";

	public static final String ORDER_BY_JPQL =
		" ORDER BY consumerRegistration.consumerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dms_consumer_registration.consumerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CONSUMERID_COLUMN_BITMASK = 1L;

	public static final long CONSUMERNAME_COLUMN_BITMASK = 2L;

	public static final long CONSUMERSTATUS_COLUMN_BITMASK = 4L;

	public static final long SUPPORTEDDOCUMENTTYPE_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ConsumerRegistration toModel(
		ConsumerRegistrationSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		ConsumerRegistration model = new ConsumerRegistrationImpl();

		model.setRegistrationId(soapModel.getRegistrationId());
		model.setConsumerId(soapModel.getConsumerId());
		model.setConsumerName(soapModel.getConsumerName());
		model.setConsumerDescription(soapModel.getConsumerDescription());
		model.setSupportedDocumentType(soapModel.getSupportedDocumentType());
		model.setConsumerStatus(soapModel.getConsumerStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ConsumerRegistration> toModels(
		ConsumerRegistrationSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ConsumerRegistration> models = new ArrayList<ConsumerRegistration>(
			soapModels.length);

		for (ConsumerRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ConsumerRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _registrationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRegistrationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _registrationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConsumerRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return ConsumerRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ConsumerRegistration, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ConsumerRegistration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ConsumerRegistration, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ConsumerRegistration)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ConsumerRegistration, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ConsumerRegistration, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ConsumerRegistration)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ConsumerRegistration, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ConsumerRegistration, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ConsumerRegistration>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ConsumerRegistration.class.getClassLoader(),
			ConsumerRegistration.class, ModelWrapper.class);

		try {
			Constructor<ConsumerRegistration> constructor =
				(Constructor<ConsumerRegistration>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ConsumerRegistration, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ConsumerRegistration, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ConsumerRegistration, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ConsumerRegistration, Object>>();
		Map<String, BiConsumer<ConsumerRegistration, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<ConsumerRegistration, ?>>();

		attributeGetterFunctions.put(
			"registrationId", ConsumerRegistration::getRegistrationId);
		attributeSetterBiConsumers.put(
			"registrationId",
			(BiConsumer<ConsumerRegistration, Long>)
				ConsumerRegistration::setRegistrationId);
		attributeGetterFunctions.put(
			"consumerId", ConsumerRegistration::getConsumerId);
		attributeSetterBiConsumers.put(
			"consumerId",
			(BiConsumer<ConsumerRegistration, String>)
				ConsumerRegistration::setConsumerId);
		attributeGetterFunctions.put(
			"consumerName", ConsumerRegistration::getConsumerName);
		attributeSetterBiConsumers.put(
			"consumerName",
			(BiConsumer<ConsumerRegistration, String>)
				ConsumerRegistration::setConsumerName);
		attributeGetterFunctions.put(
			"consumerDescription",
			ConsumerRegistration::getConsumerDescription);
		attributeSetterBiConsumers.put(
			"consumerDescription",
			(BiConsumer<ConsumerRegistration, String>)
				ConsumerRegistration::setConsumerDescription);
		attributeGetterFunctions.put(
			"supportedDocumentType",
			ConsumerRegistration::getSupportedDocumentType);
		attributeSetterBiConsumers.put(
			"supportedDocumentType",
			(BiConsumer<ConsumerRegistration, String>)
				ConsumerRegistration::setSupportedDocumentType);
		attributeGetterFunctions.put(
			"consumerStatus", ConsumerRegistration::getConsumerStatus);
		attributeSetterBiConsumers.put(
			"consumerStatus",
			(BiConsumer<ConsumerRegistration, String>)
				ConsumerRegistration::setConsumerStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getRegistrationId() {
		return _registrationId;
	}

	@Override
	public void setRegistrationId(long registrationId) {
		_registrationId = registrationId;
	}

	@JSON
	@Override
	public String getConsumerId() {
		if (_consumerId == null) {
			return "";
		}
		else {
			return _consumerId;
		}
	}

	@Override
	public void setConsumerId(String consumerId) {
		_columnBitmask |= CONSUMERID_COLUMN_BITMASK;

		if (_originalConsumerId == null) {
			_originalConsumerId = _consumerId;
		}

		_consumerId = consumerId;
	}

	public String getOriginalConsumerId() {
		return GetterUtil.getString(_originalConsumerId);
	}

	@JSON
	@Override
	public String getConsumerName() {
		if (_consumerName == null) {
			return "";
		}
		else {
			return _consumerName;
		}
	}

	@Override
	public void setConsumerName(String consumerName) {
		_columnBitmask |= CONSUMERNAME_COLUMN_BITMASK;

		if (_originalConsumerName == null) {
			_originalConsumerName = _consumerName;
		}

		_consumerName = consumerName;
	}

	public String getOriginalConsumerName() {
		return GetterUtil.getString(_originalConsumerName);
	}

	@JSON
	@Override
	public String getConsumerDescription() {
		if (_consumerDescription == null) {
			return "";
		}
		else {
			return _consumerDescription;
		}
	}

	@Override
	public String getConsumerDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getConsumerDescription(languageId);
	}

	@Override
	public String getConsumerDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getConsumerDescription(languageId, useDefault);
	}

	@Override
	public String getConsumerDescription(String languageId) {
		return LocalizationUtil.getLocalization(
			getConsumerDescription(), languageId);
	}

	@Override
	public String getConsumerDescription(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getConsumerDescription(), languageId, useDefault);
	}

	@Override
	public String getConsumerDescriptionCurrentLanguageId() {
		return _consumerDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getConsumerDescriptionCurrentValue() {
		Locale locale = getLocale(_consumerDescriptionCurrentLanguageId);

		return getConsumerDescription(locale);
	}

	@Override
	public Map<Locale, String> getConsumerDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getConsumerDescription());
	}

	@Override
	public void setConsumerDescription(String consumerDescription) {
		_consumerDescription = consumerDescription;
	}

	@Override
	public void setConsumerDescription(
		String consumerDescription, Locale locale) {

		setConsumerDescription(
			consumerDescription, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setConsumerDescription(
		String consumerDescription, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(consumerDescription)) {
			setConsumerDescription(
				LocalizationUtil.updateLocalization(
					getConsumerDescription(), "ConsumerDescription",
					consumerDescription, languageId, defaultLanguageId));
		}
		else {
			setConsumerDescription(
				LocalizationUtil.removeLocalization(
					getConsumerDescription(), "ConsumerDescription",
					languageId));
		}
	}

	@Override
	public void setConsumerDescriptionCurrentLanguageId(String languageId) {
		_consumerDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setConsumerDescriptionMap(
		Map<Locale, String> consumerDescriptionMap) {

		setConsumerDescriptionMap(
			consumerDescriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setConsumerDescriptionMap(
		Map<Locale, String> consumerDescriptionMap, Locale defaultLocale) {

		if (consumerDescriptionMap == null) {
			return;
		}

		setConsumerDescription(
			LocalizationUtil.updateLocalization(
				consumerDescriptionMap, getConsumerDescription(),
				"ConsumerDescription", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getSupportedDocumentType() {
		if (_supportedDocumentType == null) {
			return "";
		}
		else {
			return _supportedDocumentType;
		}
	}

	@Override
	public void setSupportedDocumentType(String supportedDocumentType) {
		_columnBitmask |= SUPPORTEDDOCUMENTTYPE_COLUMN_BITMASK;

		if (_originalSupportedDocumentType == null) {
			_originalSupportedDocumentType = _supportedDocumentType;
		}

		_supportedDocumentType = supportedDocumentType;
	}

	public String getOriginalSupportedDocumentType() {
		return GetterUtil.getString(_originalSupportedDocumentType);
	}

	@JSON
	@Override
	public String getConsumerStatus() {
		if (_consumerStatus == null) {
			return "";
		}
		else {
			return _consumerStatus;
		}
	}

	@Override
	public void setConsumerStatus(String consumerStatus) {
		_columnBitmask |= CONSUMERSTATUS_COLUMN_BITMASK;

		if (_originalConsumerStatus == null) {
			_originalConsumerStatus = _consumerStatus;
		}

		_consumerStatus = consumerStatus;
	}

	public String getOriginalConsumerStatus() {
		return GetterUtil.getString(_originalConsumerStatus);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ConsumerRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> consumerDescriptionMap =
			getConsumerDescriptionMap();

		for (Map.Entry<Locale, String> entry :
				consumerDescriptionMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getConsumerDescription();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			ConsumerRegistration.class.getName(), getPrimaryKey(),
			defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String consumerDescription = getConsumerDescription(defaultLocale);

		if (Validator.isNull(consumerDescription)) {
			setConsumerDescription(
				getConsumerDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setConsumerDescription(
				getConsumerDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public ConsumerRegistration toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ConsumerRegistration>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConsumerRegistrationImpl consumerRegistrationImpl =
			new ConsumerRegistrationImpl();

		consumerRegistrationImpl.setRegistrationId(getRegistrationId());
		consumerRegistrationImpl.setConsumerId(getConsumerId());
		consumerRegistrationImpl.setConsumerName(getConsumerName());
		consumerRegistrationImpl.setConsumerDescription(
			getConsumerDescription());
		consumerRegistrationImpl.setSupportedDocumentType(
			getSupportedDocumentType());
		consumerRegistrationImpl.setConsumerStatus(getConsumerStatus());

		consumerRegistrationImpl.resetOriginalValues();

		return consumerRegistrationImpl;
	}

	@Override
	public int compareTo(ConsumerRegistration consumerRegistration) {
		int value = 0;

		value = getConsumerId().compareTo(consumerRegistration.getConsumerId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ConsumerRegistration)) {
			return false;
		}

		ConsumerRegistration consumerRegistration =
			(ConsumerRegistration)object;

		long primaryKey = consumerRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalConsumerId = _consumerId;

		_originalConsumerName = _consumerName;

		_originalSupportedDocumentType = _supportedDocumentType;

		_originalConsumerStatus = _consumerStatus;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ConsumerRegistration> toCacheModel() {
		ConsumerRegistrationCacheModel consumerRegistrationCacheModel =
			new ConsumerRegistrationCacheModel();

		consumerRegistrationCacheModel.registrationId = getRegistrationId();

		consumerRegistrationCacheModel.consumerId = getConsumerId();

		String consumerId = consumerRegistrationCacheModel.consumerId;

		if ((consumerId != null) && (consumerId.length() == 0)) {
			consumerRegistrationCacheModel.consumerId = null;
		}

		consumerRegistrationCacheModel.consumerName = getConsumerName();

		String consumerName = consumerRegistrationCacheModel.consumerName;

		if ((consumerName != null) && (consumerName.length() == 0)) {
			consumerRegistrationCacheModel.consumerName = null;
		}

		consumerRegistrationCacheModel.consumerDescription =
			getConsumerDescription();

		String consumerDescription =
			consumerRegistrationCacheModel.consumerDescription;

		if ((consumerDescription != null) &&
			(consumerDescription.length() == 0)) {

			consumerRegistrationCacheModel.consumerDescription = null;
		}

		consumerRegistrationCacheModel.supportedDocumentType =
			getSupportedDocumentType();

		String supportedDocumentType =
			consumerRegistrationCacheModel.supportedDocumentType;

		if ((supportedDocumentType != null) &&
			(supportedDocumentType.length() == 0)) {

			consumerRegistrationCacheModel.supportedDocumentType = null;
		}

		consumerRegistrationCacheModel.consumerStatus = getConsumerStatus();

		String consumerStatus = consumerRegistrationCacheModel.consumerStatus;

		if ((consumerStatus != null) && (consumerStatus.length() == 0)) {
			consumerRegistrationCacheModel.consumerStatus = null;
		}

		return consumerRegistrationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ConsumerRegistration, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ConsumerRegistration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ConsumerRegistration, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((ConsumerRegistration)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ConsumerRegistration, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ConsumerRegistration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ConsumerRegistration, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((ConsumerRegistration)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ConsumerRegistration>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _registrationId;
	private String _consumerId;
	private String _originalConsumerId;
	private String _consumerName;
	private String _originalConsumerName;
	private String _consumerDescription;
	private String _consumerDescriptionCurrentLanguageId;
	private String _supportedDocumentType;
	private String _originalSupportedDocumentType;
	private String _consumerStatus;
	private String _originalConsumerStatus;
	private long _columnBitmask;
	private ConsumerRegistration _escapedModel;

}