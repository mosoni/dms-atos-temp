/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.moi.dms.consumer.registration.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;

import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the ConsumerRegistration service. Represents a row in the &quot;dms_consumer_registration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.moi.dms.consumer.registration.model.impl.ConsumerRegistrationModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.moi.dms.consumer.registration.model.impl.ConsumerRegistrationImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConsumerRegistration
 * @generated
 */
@ProviderType
public interface ConsumerRegistrationModel
	extends BaseModel<ConsumerRegistration>, LocalizedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a consumer registration model instance should use the {@link ConsumerRegistration} interface instead.
	 */

	/**
	 * Returns the primary key of this consumer registration.
	 *
	 * @return the primary key of this consumer registration
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this consumer registration.
	 *
	 * @param primaryKey the primary key of this consumer registration
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the registration ID of this consumer registration.
	 *
	 * @return the registration ID of this consumer registration
	 */
	public long getRegistrationId();

	/**
	 * Sets the registration ID of this consumer registration.
	 *
	 * @param registrationId the registration ID of this consumer registration
	 */
	public void setRegistrationId(long registrationId);

	/**
	 * Returns the consumer ID of this consumer registration.
	 *
	 * @return the consumer ID of this consumer registration
	 */
	@AutoEscape
	public String getConsumerId();

	/**
	 * Sets the consumer ID of this consumer registration.
	 *
	 * @param consumerId the consumer ID of this consumer registration
	 */
	public void setConsumerId(String consumerId);

	/**
	 * Returns the consumer name of this consumer registration.
	 *
	 * @return the consumer name of this consumer registration
	 */
	@AutoEscape
	public String getConsumerName();

	/**
	 * Sets the consumer name of this consumer registration.
	 *
	 * @param consumerName the consumer name of this consumer registration
	 */
	public void setConsumerName(String consumerName);

	/**
	 * Returns the consumer description of this consumer registration.
	 *
	 * @return the consumer description of this consumer registration
	 */
	public String getConsumerDescription();

	/**
	 * Returns the localized consumer description of this consumer registration in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized consumer description of this consumer registration
	 */
	@AutoEscape
	public String getConsumerDescription(Locale locale);

	/**
	 * Returns the localized consumer description of this consumer registration in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized consumer description of this consumer registration. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getConsumerDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized consumer description of this consumer registration in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized consumer description of this consumer registration
	 */
	@AutoEscape
	public String getConsumerDescription(String languageId);

	/**
	 * Returns the localized consumer description of this consumer registration in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized consumer description of this consumer registration
	 */
	@AutoEscape
	public String getConsumerDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getConsumerDescriptionCurrentLanguageId();

	@AutoEscape
	public String getConsumerDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized consumer descriptions of this consumer registration.
	 *
	 * @return the locales and localized consumer descriptions of this consumer registration
	 */
	public Map<Locale, String> getConsumerDescriptionMap();

	/**
	 * Sets the consumer description of this consumer registration.
	 *
	 * @param consumerDescription the consumer description of this consumer registration
	 */
	public void setConsumerDescription(String consumerDescription);

	/**
	 * Sets the localized consumer description of this consumer registration in the language.
	 *
	 * @param consumerDescription the localized consumer description of this consumer registration
	 * @param locale the locale of the language
	 */
	public void setConsumerDescription(
		String consumerDescription, Locale locale);

	/**
	 * Sets the localized consumer description of this consumer registration in the language, and sets the default locale.
	 *
	 * @param consumerDescription the localized consumer description of this consumer registration
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setConsumerDescription(
		String consumerDescription, Locale locale, Locale defaultLocale);

	public void setConsumerDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized consumer descriptions of this consumer registration from the map of locales and localized consumer descriptions.
	 *
	 * @param consumerDescriptionMap the locales and localized consumer descriptions of this consumer registration
	 */
	public void setConsumerDescriptionMap(
		Map<Locale, String> consumerDescriptionMap);

	/**
	 * Sets the localized consumer descriptions of this consumer registration from the map of locales and localized consumer descriptions, and sets the default locale.
	 *
	 * @param consumerDescriptionMap the locales and localized consumer descriptions of this consumer registration
	 * @param defaultLocale the default locale
	 */
	public void setConsumerDescriptionMap(
		Map<Locale, String> consumerDescriptionMap, Locale defaultLocale);

	/**
	 * Returns the supported document type of this consumer registration.
	 *
	 * @return the supported document type of this consumer registration
	 */
	@AutoEscape
	public String getSupportedDocumentType();

	/**
	 * Sets the supported document type of this consumer registration.
	 *
	 * @param supportedDocumentType the supported document type of this consumer registration
	 */
	public void setSupportedDocumentType(String supportedDocumentType);

	/**
	 * Returns the consumer status of this consumer registration.
	 *
	 * @return the consumer status of this consumer registration
	 */
	@AutoEscape
	public String getConsumerStatus();

	/**
	 * Sets the consumer status of this consumer registration.
	 *
	 * @param consumerStatus the consumer status of this consumer registration
	 */
	public void setConsumerStatus(String consumerStatus);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

}