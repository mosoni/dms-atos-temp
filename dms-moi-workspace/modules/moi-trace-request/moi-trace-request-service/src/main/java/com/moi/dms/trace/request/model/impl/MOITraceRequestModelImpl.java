/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.moi.dms.trace.request.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.moi.dms.trace.request.model.MOITraceRequest;
import com.moi.dms.trace.request.model.MOITraceRequestModel;
import com.moi.dms.trace.request.model.MOITraceRequestSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MOITraceRequest service. Represents a row in the &quot;moi_tracerequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MOITraceRequestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MOITraceRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MOITraceRequestImpl
 * @generated
 */
@JSON(strict = true)
public class MOITraceRequestModelImpl
	extends BaseModelImpl<MOITraceRequest> implements MOITraceRequestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a moi trace request model instance should use the <code>MOITraceRequest</code> interface instead.
	 */
	public static final String TABLE_NAME = "moi_tracerequest";

	public static final Object[][] TABLE_COLUMNS = {
		{"requestId", Types.BIGINT}, {"requestedBy", Types.VARCHAR},
		{"requestIncomingDate", Types.TIMESTAMP},
		{"requestedConsumerCode", Types.VARCHAR},
		{"requestedConsumerName", Types.VARCHAR},
		{"requestedOperation", Types.VARCHAR},
		{"requestedDocumentType", Types.VARCHAR},
		{"requestValid", Types.BOOLEAN}, {"requestResult", Types.VARCHAR},
		{"requestResultDate", Types.TIMESTAMP}, {"comment_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("requestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("requestedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestIncomingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("requestedConsumerCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestedConsumerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestedOperation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestedDocumentType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestValid", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("requestResult", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestResultDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table moi_tracerequest (requestId LONG not null primary key,requestedBy VARCHAR(75) null,requestIncomingDate DATE null,requestedConsumerCode VARCHAR(75) null,requestedConsumerName VARCHAR(75) null,requestedOperation VARCHAR(75) null,requestedDocumentType VARCHAR(75) null,requestValid BOOLEAN,requestResult VARCHAR(100) null,requestResultDate DATE null,comment_ VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table moi_tracerequest";

	public static final String ORDER_BY_JPQL =
		" ORDER BY moiTraceRequest.requestId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY moi_tracerequest.requestId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long REQUESTID_COLUMN_BITMASK = 1L;

	public static final long REQUESTINCOMINGDATE_COLUMN_BITMASK = 2L;

	public static final long REQUESTRESULT_COLUMN_BITMASK = 4L;

	public static final long REQUESTRESULTDATE_COLUMN_BITMASK = 8L;

	public static final long REQUESTEDBY_COLUMN_BITMASK = 16L;

	public static final long REQUESTEDCONSUMERCODE_COLUMN_BITMASK = 32L;

	public static final long REQUESTEDCONSUMERNAME_COLUMN_BITMASK = 64L;

	public static final long REQUESTEDOPERATION_COLUMN_BITMASK = 128L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MOITraceRequest toModel(MOITraceRequestSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MOITraceRequest model = new MOITraceRequestImpl();

		model.setRequestId(soapModel.getRequestId());
		model.setRequestedBy(soapModel.getRequestedBy());
		model.setRequestIncomingDate(soapModel.getRequestIncomingDate());
		model.setRequestedConsumerCode(soapModel.getRequestedConsumerCode());
		model.setRequestedConsumerName(soapModel.getRequestedConsumerName());
		model.setRequestedOperation(soapModel.getRequestedOperation());
		model.setRequestedDocumentType(soapModel.getRequestedDocumentType());
		model.setRequestValid(soapModel.isRequestValid());
		model.setRequestResult(soapModel.getRequestResult());
		model.setRequestResultDate(soapModel.getRequestResultDate());
		model.setComment(soapModel.getComment());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MOITraceRequest> toModels(
		MOITraceRequestSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<MOITraceRequest> models = new ArrayList<MOITraceRequest>(
			soapModels.length);

		for (MOITraceRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public MOITraceRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _requestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _requestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MOITraceRequest.class;
	}

	@Override
	public String getModelClassName() {
		return MOITraceRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MOITraceRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MOITraceRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOITraceRequest, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MOITraceRequest)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MOITraceRequest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MOITraceRequest, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MOITraceRequest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MOITraceRequest, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MOITraceRequest, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MOITraceRequest>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MOITraceRequest.class.getClassLoader(), MOITraceRequest.class,
			ModelWrapper.class);

		try {
			Constructor<MOITraceRequest> constructor =
				(Constructor<MOITraceRequest>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MOITraceRequest, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MOITraceRequest, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MOITraceRequest, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<MOITraceRequest, Object>>();
		Map<String, BiConsumer<MOITraceRequest, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MOITraceRequest, ?>>();

		attributeGetterFunctions.put(
			"requestId", MOITraceRequest::getRequestId);
		attributeSetterBiConsumers.put(
			"requestId",
			(BiConsumer<MOITraceRequest, Long>)MOITraceRequest::setRequestId);
		attributeGetterFunctions.put(
			"requestedBy", MOITraceRequest::getRequestedBy);
		attributeSetterBiConsumers.put(
			"requestedBy",
			(BiConsumer<MOITraceRequest, String>)
				MOITraceRequest::setRequestedBy);
		attributeGetterFunctions.put(
			"requestIncomingDate", MOITraceRequest::getRequestIncomingDate);
		attributeSetterBiConsumers.put(
			"requestIncomingDate",
			(BiConsumer<MOITraceRequest, Date>)
				MOITraceRequest::setRequestIncomingDate);
		attributeGetterFunctions.put(
			"requestedConsumerCode", MOITraceRequest::getRequestedConsumerCode);
		attributeSetterBiConsumers.put(
			"requestedConsumerCode",
			(BiConsumer<MOITraceRequest, String>)
				MOITraceRequest::setRequestedConsumerCode);
		attributeGetterFunctions.put(
			"requestedConsumerName", MOITraceRequest::getRequestedConsumerName);
		attributeSetterBiConsumers.put(
			"requestedConsumerName",
			(BiConsumer<MOITraceRequest, String>)
				MOITraceRequest::setRequestedConsumerName);
		attributeGetterFunctions.put(
			"requestedOperation", MOITraceRequest::getRequestedOperation);
		attributeSetterBiConsumers.put(
			"requestedOperation",
			(BiConsumer<MOITraceRequest, String>)
				MOITraceRequest::setRequestedOperation);
		attributeGetterFunctions.put(
			"requestedDocumentType", MOITraceRequest::getRequestedDocumentType);
		attributeSetterBiConsumers.put(
			"requestedDocumentType",
			(BiConsumer<MOITraceRequest, String>)
				MOITraceRequest::setRequestedDocumentType);
		attributeGetterFunctions.put(
			"requestValid", MOITraceRequest::getRequestValid);
		attributeSetterBiConsumers.put(
			"requestValid",
			(BiConsumer<MOITraceRequest, Boolean>)
				MOITraceRequest::setRequestValid);
		attributeGetterFunctions.put(
			"requestResult", MOITraceRequest::getRequestResult);
		attributeSetterBiConsumers.put(
			"requestResult",
			(BiConsumer<MOITraceRequest, String>)
				MOITraceRequest::setRequestResult);
		attributeGetterFunctions.put(
			"requestResultDate", MOITraceRequest::getRequestResultDate);
		attributeSetterBiConsumers.put(
			"requestResultDate",
			(BiConsumer<MOITraceRequest, Date>)
				MOITraceRequest::setRequestResultDate);
		attributeGetterFunctions.put("comment", MOITraceRequest::getComment);
		attributeSetterBiConsumers.put(
			"comment",
			(BiConsumer<MOITraceRequest, String>)MOITraceRequest::setComment);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getRequestId() {
		return _requestId;
	}

	@Override
	public void setRequestId(long requestId) {
		_columnBitmask |= REQUESTID_COLUMN_BITMASK;

		if (!_setOriginalRequestId) {
			_setOriginalRequestId = true;

			_originalRequestId = _requestId;
		}

		_requestId = requestId;
	}

	public long getOriginalRequestId() {
		return _originalRequestId;
	}

	@JSON
	@Override
	public String getRequestedBy() {
		if (_requestedBy == null) {
			return "";
		}
		else {
			return _requestedBy;
		}
	}

	@Override
	public void setRequestedBy(String requestedBy) {
		_columnBitmask |= REQUESTEDBY_COLUMN_BITMASK;

		if (_originalRequestedBy == null) {
			_originalRequestedBy = _requestedBy;
		}

		_requestedBy = requestedBy;
	}

	public String getOriginalRequestedBy() {
		return GetterUtil.getString(_originalRequestedBy);
	}

	@JSON
	@Override
	public Date getRequestIncomingDate() {
		return _requestIncomingDate;
	}

	@Override
	public void setRequestIncomingDate(Date requestIncomingDate) {
		_columnBitmask |= REQUESTINCOMINGDATE_COLUMN_BITMASK;

		if (_originalRequestIncomingDate == null) {
			_originalRequestIncomingDate = _requestIncomingDate;
		}

		_requestIncomingDate = requestIncomingDate;
	}

	public Date getOriginalRequestIncomingDate() {
		return _originalRequestIncomingDate;
	}

	@JSON
	@Override
	public String getRequestedConsumerCode() {
		if (_requestedConsumerCode == null) {
			return "";
		}
		else {
			return _requestedConsumerCode;
		}
	}

	@Override
	public void setRequestedConsumerCode(String requestedConsumerCode) {
		_columnBitmask |= REQUESTEDCONSUMERCODE_COLUMN_BITMASK;

		if (_originalRequestedConsumerCode == null) {
			_originalRequestedConsumerCode = _requestedConsumerCode;
		}

		_requestedConsumerCode = requestedConsumerCode;
	}

	public String getOriginalRequestedConsumerCode() {
		return GetterUtil.getString(_originalRequestedConsumerCode);
	}

	@JSON
	@Override
	public String getRequestedConsumerName() {
		if (_requestedConsumerName == null) {
			return "";
		}
		else {
			return _requestedConsumerName;
		}
	}

	@Override
	public void setRequestedConsumerName(String requestedConsumerName) {
		_columnBitmask |= REQUESTEDCONSUMERNAME_COLUMN_BITMASK;

		if (_originalRequestedConsumerName == null) {
			_originalRequestedConsumerName = _requestedConsumerName;
		}

		_requestedConsumerName = requestedConsumerName;
	}

	public String getOriginalRequestedConsumerName() {
		return GetterUtil.getString(_originalRequestedConsumerName);
	}

	@JSON
	@Override
	public String getRequestedOperation() {
		if (_requestedOperation == null) {
			return "";
		}
		else {
			return _requestedOperation;
		}
	}

	@Override
	public void setRequestedOperation(String requestedOperation) {
		_columnBitmask |= REQUESTEDOPERATION_COLUMN_BITMASK;

		if (_originalRequestedOperation == null) {
			_originalRequestedOperation = _requestedOperation;
		}

		_requestedOperation = requestedOperation;
	}

	public String getOriginalRequestedOperation() {
		return GetterUtil.getString(_originalRequestedOperation);
	}

	@JSON
	@Override
	public String getRequestedDocumentType() {
		if (_requestedDocumentType == null) {
			return "";
		}
		else {
			return _requestedDocumentType;
		}
	}

	@Override
	public void setRequestedDocumentType(String requestedDocumentType) {
		_requestedDocumentType = requestedDocumentType;
	}

	@JSON
	@Override
	public boolean getRequestValid() {
		return _requestValid;
	}

	@JSON
	@Override
	public boolean isRequestValid() {
		return _requestValid;
	}

	@Override
	public void setRequestValid(boolean requestValid) {
		_requestValid = requestValid;
	}

	@JSON
	@Override
	public String getRequestResult() {
		if (_requestResult == null) {
			return "";
		}
		else {
			return _requestResult;
		}
	}

	@Override
	public void setRequestResult(String requestResult) {
		_columnBitmask |= REQUESTRESULT_COLUMN_BITMASK;

		if (_originalRequestResult == null) {
			_originalRequestResult = _requestResult;
		}

		_requestResult = requestResult;
	}

	public String getOriginalRequestResult() {
		return GetterUtil.getString(_originalRequestResult);
	}

	@JSON
	@Override
	public Date getRequestResultDate() {
		return _requestResultDate;
	}

	@Override
	public void setRequestResultDate(Date requestResultDate) {
		_columnBitmask |= REQUESTRESULTDATE_COLUMN_BITMASK;

		if (_originalRequestResultDate == null) {
			_originalRequestResultDate = _requestResultDate;
		}

		_requestResultDate = requestResultDate;
	}

	public Date getOriginalRequestResultDate() {
		return _originalRequestResultDate;
	}

	@JSON
	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, MOITraceRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MOITraceRequest toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MOITraceRequest>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MOITraceRequestImpl moiTraceRequestImpl = new MOITraceRequestImpl();

		moiTraceRequestImpl.setRequestId(getRequestId());
		moiTraceRequestImpl.setRequestedBy(getRequestedBy());
		moiTraceRequestImpl.setRequestIncomingDate(getRequestIncomingDate());
		moiTraceRequestImpl.setRequestedConsumerCode(
			getRequestedConsumerCode());
		moiTraceRequestImpl.setRequestedConsumerName(
			getRequestedConsumerName());
		moiTraceRequestImpl.setRequestedOperation(getRequestedOperation());
		moiTraceRequestImpl.setRequestedDocumentType(
			getRequestedDocumentType());
		moiTraceRequestImpl.setRequestValid(isRequestValid());
		moiTraceRequestImpl.setRequestResult(getRequestResult());
		moiTraceRequestImpl.setRequestResultDate(getRequestResultDate());
		moiTraceRequestImpl.setComment(getComment());

		moiTraceRequestImpl.resetOriginalValues();

		return moiTraceRequestImpl;
	}

	@Override
	public int compareTo(MOITraceRequest moiTraceRequest) {
		int value = 0;

		if (getRequestId() < moiTraceRequest.getRequestId()) {
			value = -1;
		}
		else if (getRequestId() > moiTraceRequest.getRequestId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MOITraceRequest)) {
			return false;
		}

		MOITraceRequest moiTraceRequest = (MOITraceRequest)object;

		long primaryKey = moiTraceRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalRequestId = _requestId;

		_setOriginalRequestId = false;

		_originalRequestedBy = _requestedBy;

		_originalRequestIncomingDate = _requestIncomingDate;

		_originalRequestedConsumerCode = _requestedConsumerCode;

		_originalRequestedConsumerName = _requestedConsumerName;

		_originalRequestedOperation = _requestedOperation;

		_originalRequestResult = _requestResult;

		_originalRequestResultDate = _requestResultDate;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MOITraceRequest> toCacheModel() {
		MOITraceRequestCacheModel moiTraceRequestCacheModel =
			new MOITraceRequestCacheModel();

		moiTraceRequestCacheModel.requestId = getRequestId();

		moiTraceRequestCacheModel.requestedBy = getRequestedBy();

		String requestedBy = moiTraceRequestCacheModel.requestedBy;

		if ((requestedBy != null) && (requestedBy.length() == 0)) {
			moiTraceRequestCacheModel.requestedBy = null;
		}

		Date requestIncomingDate = getRequestIncomingDate();

		if (requestIncomingDate != null) {
			moiTraceRequestCacheModel.requestIncomingDate =
				requestIncomingDate.getTime();
		}
		else {
			moiTraceRequestCacheModel.requestIncomingDate = Long.MIN_VALUE;
		}

		moiTraceRequestCacheModel.requestedConsumerCode =
			getRequestedConsumerCode();

		String requestedConsumerCode =
			moiTraceRequestCacheModel.requestedConsumerCode;

		if ((requestedConsumerCode != null) &&
			(requestedConsumerCode.length() == 0)) {

			moiTraceRequestCacheModel.requestedConsumerCode = null;
		}

		moiTraceRequestCacheModel.requestedConsumerName =
			getRequestedConsumerName();

		String requestedConsumerName =
			moiTraceRequestCacheModel.requestedConsumerName;

		if ((requestedConsumerName != null) &&
			(requestedConsumerName.length() == 0)) {

			moiTraceRequestCacheModel.requestedConsumerName = null;
		}

		moiTraceRequestCacheModel.requestedOperation = getRequestedOperation();

		String requestedOperation =
			moiTraceRequestCacheModel.requestedOperation;

		if ((requestedOperation != null) &&
			(requestedOperation.length() == 0)) {

			moiTraceRequestCacheModel.requestedOperation = null;
		}

		moiTraceRequestCacheModel.requestedDocumentType =
			getRequestedDocumentType();

		String requestedDocumentType =
			moiTraceRequestCacheModel.requestedDocumentType;

		if ((requestedDocumentType != null) &&
			(requestedDocumentType.length() == 0)) {

			moiTraceRequestCacheModel.requestedDocumentType = null;
		}

		moiTraceRequestCacheModel.requestValid = isRequestValid();

		moiTraceRequestCacheModel.requestResult = getRequestResult();

		String requestResult = moiTraceRequestCacheModel.requestResult;

		if ((requestResult != null) && (requestResult.length() == 0)) {
			moiTraceRequestCacheModel.requestResult = null;
		}

		Date requestResultDate = getRequestResultDate();

		if (requestResultDate != null) {
			moiTraceRequestCacheModel.requestResultDate =
				requestResultDate.getTime();
		}
		else {
			moiTraceRequestCacheModel.requestResultDate = Long.MIN_VALUE;
		}

		moiTraceRequestCacheModel.comment = getComment();

		String comment = moiTraceRequestCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			moiTraceRequestCacheModel.comment = null;
		}

		return moiTraceRequestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MOITraceRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MOITraceRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOITraceRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((MOITraceRequest)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MOITraceRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MOITraceRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOITraceRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MOITraceRequest)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MOITraceRequest>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _requestId;
	private long _originalRequestId;
	private boolean _setOriginalRequestId;
	private String _requestedBy;
	private String _originalRequestedBy;
	private Date _requestIncomingDate;
	private Date _originalRequestIncomingDate;
	private String _requestedConsumerCode;
	private String _originalRequestedConsumerCode;
	private String _requestedConsumerName;
	private String _originalRequestedConsumerName;
	private String _requestedOperation;
	private String _originalRequestedOperation;
	private String _requestedDocumentType;
	private boolean _requestValid;
	private String _requestResult;
	private String _originalRequestResult;
	private Date _requestResultDate;
	private Date _originalRequestResultDate;
	private String _comment;
	private long _columnBitmask;
	private MOITraceRequest _escapedModel;

}