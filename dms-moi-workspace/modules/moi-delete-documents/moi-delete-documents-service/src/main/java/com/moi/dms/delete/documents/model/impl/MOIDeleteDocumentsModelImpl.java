/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.moi.dms.delete.documents.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.moi.dms.delete.documents.model.MOIDeleteDocuments;
import com.moi.dms.delete.documents.model.MOIDeleteDocumentsModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MOIDeleteDocuments service. Represents a row in the &quot;moi_deletedocuments&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MOIDeleteDocumentsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MOIDeleteDocumentsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MOIDeleteDocumentsImpl
 * @generated
 */
public class MOIDeleteDocumentsModelImpl
	extends BaseModelImpl<MOIDeleteDocuments>
	implements MOIDeleteDocumentsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a moi delete documents model instance should use the <code>MOIDeleteDocuments</code> interface instead.
	 */
	public static final String TABLE_NAME = "moi_deletedocuments";

	public static final Object[][] TABLE_COLUMNS = {
		{"documentId", Types.BIGINT}, {"fileEntryId", Types.BIGINT},
		{"fileEntryName", Types.VARCHAR}, {"consumerCode", Types.VARCHAR},
		{"moduleType", Types.VARCHAR}, {"uploadedBy", Types.VARCHAR},
		{"uploadedDate", Types.TIMESTAMP}, {"status", Types.VARCHAR},
		{"comments", Types.VARCHAR}, {"updatedBy", Types.VARCHAR},
		{"updatedDate", Types.TIMESTAMP}, {"pendingIdentifiers", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("documentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("consumerCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("moduleType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updatedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updatedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("pendingIdentifiers", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table moi_deletedocuments (documentId LONG not null primary key,fileEntryId LONG,fileEntryName VARCHAR(75) null,consumerCode VARCHAR(75) null,moduleType VARCHAR(75) null,uploadedBy VARCHAR(75) null,uploadedDate DATE null,status VARCHAR(75) null,comments VARCHAR(75) null,updatedBy VARCHAR(75) null,updatedDate DATE null,pendingIdentifiers VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table moi_deletedocuments";

	public static final String ORDER_BY_JPQL =
		" ORDER BY moiDeleteDocuments.documentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY moi_deletedocuments.documentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CONSUMERCODE_COLUMN_BITMASK = 1L;

	public static final long DOCUMENTID_COLUMN_BITMASK = 2L;

	public static final long FILEENTRYID_COLUMN_BITMASK = 4L;

	public static final long FILEENTRYNAME_COLUMN_BITMASK = 8L;

	public static final long MODULETYPE_COLUMN_BITMASK = 16L;

	public static final long PENDINGIDENTIFIERS_COLUMN_BITMASK = 32L;

	public static final long STATUS_COLUMN_BITMASK = 64L;

	public static final long UPDATEDBY_COLUMN_BITMASK = 128L;

	public static final long UPDATEDDATE_COLUMN_BITMASK = 256L;

	public static final long UPLOADEDBY_COLUMN_BITMASK = 512L;

	public static final long UPLOADEDDATE_COLUMN_BITMASK = 1024L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public MOIDeleteDocumentsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _documentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDocumentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _documentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MOIDeleteDocuments.class;
	}

	@Override
	public String getModelClassName() {
		return MOIDeleteDocuments.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MOIDeleteDocuments, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MOIDeleteDocuments, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOIDeleteDocuments, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MOIDeleteDocuments)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MOIDeleteDocuments, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MOIDeleteDocuments, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MOIDeleteDocuments)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MOIDeleteDocuments, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MOIDeleteDocuments, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MOIDeleteDocuments>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MOIDeleteDocuments.class.getClassLoader(), MOIDeleteDocuments.class,
			ModelWrapper.class);

		try {
			Constructor<MOIDeleteDocuments> constructor =
				(Constructor<MOIDeleteDocuments>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MOIDeleteDocuments, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MOIDeleteDocuments, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MOIDeleteDocuments, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<MOIDeleteDocuments, Object>>();
		Map<String, BiConsumer<MOIDeleteDocuments, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<MOIDeleteDocuments, ?>>();

		attributeGetterFunctions.put(
			"documentId", MOIDeleteDocuments::getDocumentId);
		attributeSetterBiConsumers.put(
			"documentId",
			(BiConsumer<MOIDeleteDocuments, Long>)
				MOIDeleteDocuments::setDocumentId);
		attributeGetterFunctions.put(
			"fileEntryId", MOIDeleteDocuments::getFileEntryId);
		attributeSetterBiConsumers.put(
			"fileEntryId",
			(BiConsumer<MOIDeleteDocuments, Long>)
				MOIDeleteDocuments::setFileEntryId);
		attributeGetterFunctions.put(
			"fileEntryName", MOIDeleteDocuments::getFileEntryName);
		attributeSetterBiConsumers.put(
			"fileEntryName",
			(BiConsumer<MOIDeleteDocuments, String>)
				MOIDeleteDocuments::setFileEntryName);
		attributeGetterFunctions.put(
			"consumerCode", MOIDeleteDocuments::getConsumerCode);
		attributeSetterBiConsumers.put(
			"consumerCode",
			(BiConsumer<MOIDeleteDocuments, String>)
				MOIDeleteDocuments::setConsumerCode);
		attributeGetterFunctions.put(
			"moduleType", MOIDeleteDocuments::getModuleType);
		attributeSetterBiConsumers.put(
			"moduleType",
			(BiConsumer<MOIDeleteDocuments, String>)
				MOIDeleteDocuments::setModuleType);
		attributeGetterFunctions.put(
			"uploadedBy", MOIDeleteDocuments::getUploadedBy);
		attributeSetterBiConsumers.put(
			"uploadedBy",
			(BiConsumer<MOIDeleteDocuments, String>)
				MOIDeleteDocuments::setUploadedBy);
		attributeGetterFunctions.put(
			"uploadedDate", MOIDeleteDocuments::getUploadedDate);
		attributeSetterBiConsumers.put(
			"uploadedDate",
			(BiConsumer<MOIDeleteDocuments, Date>)
				MOIDeleteDocuments::setUploadedDate);
		attributeGetterFunctions.put("status", MOIDeleteDocuments::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<MOIDeleteDocuments, String>)
				MOIDeleteDocuments::setStatus);
		attributeGetterFunctions.put(
			"comments", MOIDeleteDocuments::getComments);
		attributeSetterBiConsumers.put(
			"comments",
			(BiConsumer<MOIDeleteDocuments, String>)
				MOIDeleteDocuments::setComments);
		attributeGetterFunctions.put(
			"updatedBy", MOIDeleteDocuments::getUpdatedBy);
		attributeSetterBiConsumers.put(
			"updatedBy",
			(BiConsumer<MOIDeleteDocuments, String>)
				MOIDeleteDocuments::setUpdatedBy);
		attributeGetterFunctions.put(
			"updatedDate", MOIDeleteDocuments::getUpdatedDate);
		attributeSetterBiConsumers.put(
			"updatedDate",
			(BiConsumer<MOIDeleteDocuments, Date>)
				MOIDeleteDocuments::setUpdatedDate);
		attributeGetterFunctions.put(
			"pendingIdentifiers", MOIDeleteDocuments::getPendingIdentifiers);
		attributeSetterBiConsumers.put(
			"pendingIdentifiers",
			(BiConsumer<MOIDeleteDocuments, String>)
				MOIDeleteDocuments::setPendingIdentifiers);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getDocumentId() {
		return _documentId;
	}

	@Override
	public void setDocumentId(long documentId) {
		_columnBitmask |= DOCUMENTID_COLUMN_BITMASK;

		if (!_setOriginalDocumentId) {
			_setOriginalDocumentId = true;

			_originalDocumentId = _documentId;
		}

		_documentId = documentId;
	}

	public long getOriginalDocumentId() {
		return _originalDocumentId;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_columnBitmask |= FILEENTRYID_COLUMN_BITMASK;

		if (!_setOriginalFileEntryId) {
			_setOriginalFileEntryId = true;

			_originalFileEntryId = _fileEntryId;
		}

		_fileEntryId = fileEntryId;
	}

	public long getOriginalFileEntryId() {
		return _originalFileEntryId;
	}

	@Override
	public String getFileEntryName() {
		if (_fileEntryName == null) {
			return "";
		}
		else {
			return _fileEntryName;
		}
	}

	@Override
	public void setFileEntryName(String fileEntryName) {
		_columnBitmask |= FILEENTRYNAME_COLUMN_BITMASK;

		if (_originalFileEntryName == null) {
			_originalFileEntryName = _fileEntryName;
		}

		_fileEntryName = fileEntryName;
	}

	public String getOriginalFileEntryName() {
		return GetterUtil.getString(_originalFileEntryName);
	}

	@Override
	public String getConsumerCode() {
		if (_consumerCode == null) {
			return "";
		}
		else {
			return _consumerCode;
		}
	}

	@Override
	public void setConsumerCode(String consumerCode) {
		_columnBitmask |= CONSUMERCODE_COLUMN_BITMASK;

		if (_originalConsumerCode == null) {
			_originalConsumerCode = _consumerCode;
		}

		_consumerCode = consumerCode;
	}

	public String getOriginalConsumerCode() {
		return GetterUtil.getString(_originalConsumerCode);
	}

	@Override
	public String getModuleType() {
		if (_moduleType == null) {
			return "";
		}
		else {
			return _moduleType;
		}
	}

	@Override
	public void setModuleType(String moduleType) {
		_columnBitmask |= MODULETYPE_COLUMN_BITMASK;

		if (_originalModuleType == null) {
			_originalModuleType = _moduleType;
		}

		_moduleType = moduleType;
	}

	public String getOriginalModuleType() {
		return GetterUtil.getString(_originalModuleType);
	}

	@Override
	public String getUploadedBy() {
		if (_uploadedBy == null) {
			return "";
		}
		else {
			return _uploadedBy;
		}
	}

	@Override
	public void setUploadedBy(String uploadedBy) {
		_columnBitmask |= UPLOADEDBY_COLUMN_BITMASK;

		if (_originalUploadedBy == null) {
			_originalUploadedBy = _uploadedBy;
		}

		_uploadedBy = uploadedBy;
	}

	public String getOriginalUploadedBy() {
		return GetterUtil.getString(_originalUploadedBy);
	}

	@Override
	public Date getUploadedDate() {
		return _uploadedDate;
	}

	@Override
	public void setUploadedDate(Date uploadedDate) {
		_columnBitmask |= UPLOADEDDATE_COLUMN_BITMASK;

		if (_originalUploadedDate == null) {
			_originalUploadedDate = _uploadedDate;
		}

		_uploadedDate = uploadedDate;
	}

	public Date getOriginalUploadedDate() {
		return _originalUploadedDate;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return "";
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_columnBitmask |= UPDATEDBY_COLUMN_BITMASK;

		if (_originalUpdatedBy == null) {
			_originalUpdatedBy = _updatedBy;
		}

		_updatedBy = updatedBy;
	}

	public String getOriginalUpdatedBy() {
		return GetterUtil.getString(_originalUpdatedBy);
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_columnBitmask |= UPDATEDDATE_COLUMN_BITMASK;

		if (_originalUpdatedDate == null) {
			_originalUpdatedDate = _updatedDate;
		}

		_updatedDate = updatedDate;
	}

	public Date getOriginalUpdatedDate() {
		return _originalUpdatedDate;
	}

	@Override
	public String getPendingIdentifiers() {
		if (_pendingIdentifiers == null) {
			return "";
		}
		else {
			return _pendingIdentifiers;
		}
	}

	@Override
	public void setPendingIdentifiers(String pendingIdentifiers) {
		_columnBitmask |= PENDINGIDENTIFIERS_COLUMN_BITMASK;

		if (_originalPendingIdentifiers == null) {
			_originalPendingIdentifiers = _pendingIdentifiers;
		}

		_pendingIdentifiers = pendingIdentifiers;
	}

	public String getOriginalPendingIdentifiers() {
		return GetterUtil.getString(_originalPendingIdentifiers);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, MOIDeleteDocuments.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MOIDeleteDocuments toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MOIDeleteDocuments>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MOIDeleteDocumentsImpl moiDeleteDocumentsImpl =
			new MOIDeleteDocumentsImpl();

		moiDeleteDocumentsImpl.setDocumentId(getDocumentId());
		moiDeleteDocumentsImpl.setFileEntryId(getFileEntryId());
		moiDeleteDocumentsImpl.setFileEntryName(getFileEntryName());
		moiDeleteDocumentsImpl.setConsumerCode(getConsumerCode());
		moiDeleteDocumentsImpl.setModuleType(getModuleType());
		moiDeleteDocumentsImpl.setUploadedBy(getUploadedBy());
		moiDeleteDocumentsImpl.setUploadedDate(getUploadedDate());
		moiDeleteDocumentsImpl.setStatus(getStatus());
		moiDeleteDocumentsImpl.setComments(getComments());
		moiDeleteDocumentsImpl.setUpdatedBy(getUpdatedBy());
		moiDeleteDocumentsImpl.setUpdatedDate(getUpdatedDate());
		moiDeleteDocumentsImpl.setPendingIdentifiers(getPendingIdentifiers());

		moiDeleteDocumentsImpl.resetOriginalValues();

		return moiDeleteDocumentsImpl;
	}

	@Override
	public int compareTo(MOIDeleteDocuments moiDeleteDocuments) {
		int value = 0;

		if (getDocumentId() < moiDeleteDocuments.getDocumentId()) {
			value = -1;
		}
		else if (getDocumentId() > moiDeleteDocuments.getDocumentId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MOIDeleteDocuments)) {
			return false;
		}

		MOIDeleteDocuments moiDeleteDocuments = (MOIDeleteDocuments)object;

		long primaryKey = moiDeleteDocuments.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalDocumentId = _documentId;

		_setOriginalDocumentId = false;

		_originalFileEntryId = _fileEntryId;

		_setOriginalFileEntryId = false;

		_originalFileEntryName = _fileEntryName;

		_originalConsumerCode = _consumerCode;

		_originalModuleType = _moduleType;

		_originalUploadedBy = _uploadedBy;

		_originalUploadedDate = _uploadedDate;

		_originalStatus = _status;

		_originalUpdatedBy = _updatedBy;

		_originalUpdatedDate = _updatedDate;

		_originalPendingIdentifiers = _pendingIdentifiers;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MOIDeleteDocuments> toCacheModel() {
		MOIDeleteDocumentsCacheModel moiDeleteDocumentsCacheModel =
			new MOIDeleteDocumentsCacheModel();

		moiDeleteDocumentsCacheModel.documentId = getDocumentId();

		moiDeleteDocumentsCacheModel.fileEntryId = getFileEntryId();

		moiDeleteDocumentsCacheModel.fileEntryName = getFileEntryName();

		String fileEntryName = moiDeleteDocumentsCacheModel.fileEntryName;

		if ((fileEntryName != null) && (fileEntryName.length() == 0)) {
			moiDeleteDocumentsCacheModel.fileEntryName = null;
		}

		moiDeleteDocumentsCacheModel.consumerCode = getConsumerCode();

		String consumerCode = moiDeleteDocumentsCacheModel.consumerCode;

		if ((consumerCode != null) && (consumerCode.length() == 0)) {
			moiDeleteDocumentsCacheModel.consumerCode = null;
		}

		moiDeleteDocumentsCacheModel.moduleType = getModuleType();

		String moduleType = moiDeleteDocumentsCacheModel.moduleType;

		if ((moduleType != null) && (moduleType.length() == 0)) {
			moiDeleteDocumentsCacheModel.moduleType = null;
		}

		moiDeleteDocumentsCacheModel.uploadedBy = getUploadedBy();

		String uploadedBy = moiDeleteDocumentsCacheModel.uploadedBy;

		if ((uploadedBy != null) && (uploadedBy.length() == 0)) {
			moiDeleteDocumentsCacheModel.uploadedBy = null;
		}

		Date uploadedDate = getUploadedDate();

		if (uploadedDate != null) {
			moiDeleteDocumentsCacheModel.uploadedDate = uploadedDate.getTime();
		}
		else {
			moiDeleteDocumentsCacheModel.uploadedDate = Long.MIN_VALUE;
		}

		moiDeleteDocumentsCacheModel.status = getStatus();

		String status = moiDeleteDocumentsCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			moiDeleteDocumentsCacheModel.status = null;
		}

		moiDeleteDocumentsCacheModel.comments = getComments();

		String comments = moiDeleteDocumentsCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			moiDeleteDocumentsCacheModel.comments = null;
		}

		moiDeleteDocumentsCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = moiDeleteDocumentsCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			moiDeleteDocumentsCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			moiDeleteDocumentsCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			moiDeleteDocumentsCacheModel.updatedDate = Long.MIN_VALUE;
		}

		moiDeleteDocumentsCacheModel.pendingIdentifiers =
			getPendingIdentifiers();

		String pendingIdentifiers =
			moiDeleteDocumentsCacheModel.pendingIdentifiers;

		if ((pendingIdentifiers != null) &&
			(pendingIdentifiers.length() == 0)) {

			moiDeleteDocumentsCacheModel.pendingIdentifiers = null;
		}

		return moiDeleteDocumentsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MOIDeleteDocuments, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MOIDeleteDocuments, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOIDeleteDocuments, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((MOIDeleteDocuments)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MOIDeleteDocuments, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MOIDeleteDocuments, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOIDeleteDocuments, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MOIDeleteDocuments)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MOIDeleteDocuments>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _documentId;
	private long _originalDocumentId;
	private boolean _setOriginalDocumentId;
	private long _fileEntryId;
	private long _originalFileEntryId;
	private boolean _setOriginalFileEntryId;
	private String _fileEntryName;
	private String _originalFileEntryName;
	private String _consumerCode;
	private String _originalConsumerCode;
	private String _moduleType;
	private String _originalModuleType;
	private String _uploadedBy;
	private String _originalUploadedBy;
	private Date _uploadedDate;
	private Date _originalUploadedDate;
	private String _status;
	private String _originalStatus;
	private String _comments;
	private String _updatedBy;
	private String _originalUpdatedBy;
	private Date _updatedDate;
	private Date _originalUpdatedDate;
	private String _pendingIdentifiers;
	private String _originalPendingIdentifiers;
	private long _columnBitmask;
	private MOIDeleteDocuments _escapedModel;

}