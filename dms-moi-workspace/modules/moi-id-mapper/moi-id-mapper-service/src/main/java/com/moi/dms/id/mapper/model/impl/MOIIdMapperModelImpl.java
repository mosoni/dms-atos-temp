/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.moi.dms.id.mapper.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.moi.dms.id.mapper.model.MOIIdMapper;
import com.moi.dms.id.mapper.model.MOIIdMapperModel;
import com.moi.dms.id.mapper.model.MOIIdMapperSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MOIIdMapper service. Represents a row in the &quot;moi_idmapper&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MOIIdMapperModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MOIIdMapperImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MOIIdMapperImpl
 * @generated
 */
@JSON(strict = true)
public class MOIIdMapperModelImpl
	extends BaseModelImpl<MOIIdMapper> implements MOIIdMapperModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a moi ID mapper model instance should use the <code>MOIIdMapper</code> interface instead.
	 */
	public static final String TABLE_NAME = "moi_idmapper";

	public static final Object[][] TABLE_COLUMNS = {
		{"mapperId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"mosipCurrentState", Types.VARCHAR},
		{"mosipDocumentType", Types.VARCHAR}, {"registrationId", Types.VARCHAR},
		{"resourceId", Types.BIGINT}, {"documentTitle", Types.VARCHAR},
		{"activeState", Types.INTEGER}, {"fileEntryId", Types.VARCHAR},
		{"updateDate", Types.TIMESTAMP}, {"updatedBy", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mapperId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mosipCurrentState", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mosipDocumentType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registrationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("resourceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activeState", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updatedBy", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table moi_idmapper (mapperId LONG not null primary key,groupId LONG,companyId LONG,mosipCurrentState VARCHAR(75) null,mosipDocumentType VARCHAR(75) null,registrationId VARCHAR(75) null,resourceId LONG,documentTitle VARCHAR(75) null,activeState INTEGER,fileEntryId VARCHAR(75) null,updateDate DATE null,updatedBy VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table moi_idmapper";

	public static final String ORDER_BY_JPQL =
		" ORDER BY moiIdMapper.mapperId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY moi_idmapper.mapperId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long DOCUMENTTITLE_COLUMN_BITMASK = 1L;

	public static final long FILEENTRYID_COLUMN_BITMASK = 2L;

	public static final long MAPPERID_COLUMN_BITMASK = 4L;

	public static final long MOSIPCURRENTSTATE_COLUMN_BITMASK = 8L;

	public static final long MOSIPDOCUMENTTYPE_COLUMN_BITMASK = 16L;

	public static final long REGISTRATIONID_COLUMN_BITMASK = 32L;

	public static final long RESOURCEID_COLUMN_BITMASK = 64L;

	public static final long UPDATEDATE_COLUMN_BITMASK = 128L;

	public static final long UPDATEDBY_COLUMN_BITMASK = 256L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MOIIdMapper toModel(MOIIdMapperSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MOIIdMapper model = new MOIIdMapperImpl();

		model.setMapperId(soapModel.getMapperId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setMosipCurrentState(soapModel.getMosipCurrentState());
		model.setMosipDocumentType(soapModel.getMosipDocumentType());
		model.setRegistrationId(soapModel.getRegistrationId());
		model.setResourceId(soapModel.getResourceId());
		model.setDocumentTitle(soapModel.getDocumentTitle());
		model.setActiveState(soapModel.getActiveState());
		model.setFileEntryId(soapModel.getFileEntryId());
		model.setUpdateDate(soapModel.getUpdateDate());
		model.setUpdatedBy(soapModel.getUpdatedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MOIIdMapper> toModels(MOIIdMapperSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MOIIdMapper> models = new ArrayList<MOIIdMapper>(
			soapModels.length);

		for (MOIIdMapperSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public MOIIdMapperModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mapperId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMapperId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mapperId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MOIIdMapper.class;
	}

	@Override
	public String getModelClassName() {
		return MOIIdMapper.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MOIIdMapper, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MOIIdMapper, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOIIdMapper, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MOIIdMapper)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MOIIdMapper, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MOIIdMapper, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MOIIdMapper)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MOIIdMapper, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MOIIdMapper, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MOIIdMapper>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MOIIdMapper.class.getClassLoader(), MOIIdMapper.class,
			ModelWrapper.class);

		try {
			Constructor<MOIIdMapper> constructor =
				(Constructor<MOIIdMapper>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MOIIdMapper, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MOIIdMapper, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MOIIdMapper, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MOIIdMapper, Object>>();
		Map<String, BiConsumer<MOIIdMapper, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MOIIdMapper, ?>>();

		attributeGetterFunctions.put("mapperId", MOIIdMapper::getMapperId);
		attributeSetterBiConsumers.put(
			"mapperId",
			(BiConsumer<MOIIdMapper, Long>)MOIIdMapper::setMapperId);
		attributeGetterFunctions.put("groupId", MOIIdMapper::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<MOIIdMapper, Long>)MOIIdMapper::setGroupId);
		attributeGetterFunctions.put("companyId", MOIIdMapper::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<MOIIdMapper, Long>)MOIIdMapper::setCompanyId);
		attributeGetterFunctions.put(
			"mosipCurrentState", MOIIdMapper::getMosipCurrentState);
		attributeSetterBiConsumers.put(
			"mosipCurrentState",
			(BiConsumer<MOIIdMapper, String>)MOIIdMapper::setMosipCurrentState);
		attributeGetterFunctions.put(
			"mosipDocumentType", MOIIdMapper::getMosipDocumentType);
		attributeSetterBiConsumers.put(
			"mosipDocumentType",
			(BiConsumer<MOIIdMapper, String>)MOIIdMapper::setMosipDocumentType);
		attributeGetterFunctions.put(
			"registrationId", MOIIdMapper::getRegistrationId);
		attributeSetterBiConsumers.put(
			"registrationId",
			(BiConsumer<MOIIdMapper, String>)MOIIdMapper::setRegistrationId);
		attributeGetterFunctions.put("resourceId", MOIIdMapper::getResourceId);
		attributeSetterBiConsumers.put(
			"resourceId",
			(BiConsumer<MOIIdMapper, Long>)MOIIdMapper::setResourceId);
		attributeGetterFunctions.put(
			"documentTitle", MOIIdMapper::getDocumentTitle);
		attributeSetterBiConsumers.put(
			"documentTitle",
			(BiConsumer<MOIIdMapper, String>)MOIIdMapper::setDocumentTitle);
		attributeGetterFunctions.put(
			"activeState", MOIIdMapper::getActiveState);
		attributeSetterBiConsumers.put(
			"activeState",
			(BiConsumer<MOIIdMapper, Integer>)MOIIdMapper::setActiveState);
		attributeGetterFunctions.put(
			"fileEntryId", MOIIdMapper::getFileEntryId);
		attributeSetterBiConsumers.put(
			"fileEntryId",
			(BiConsumer<MOIIdMapper, String>)MOIIdMapper::setFileEntryId);
		attributeGetterFunctions.put("updateDate", MOIIdMapper::getUpdateDate);
		attributeSetterBiConsumers.put(
			"updateDate",
			(BiConsumer<MOIIdMapper, Date>)MOIIdMapper::setUpdateDate);
		attributeGetterFunctions.put("updatedBy", MOIIdMapper::getUpdatedBy);
		attributeSetterBiConsumers.put(
			"updatedBy",
			(BiConsumer<MOIIdMapper, String>)MOIIdMapper::setUpdatedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMapperId() {
		return _mapperId;
	}

	@Override
	public void setMapperId(long mapperId) {
		_columnBitmask |= MAPPERID_COLUMN_BITMASK;

		if (!_setOriginalMapperId) {
			_setOriginalMapperId = true;

			_originalMapperId = _mapperId;
		}

		_mapperId = mapperId;
	}

	public long getOriginalMapperId() {
		return _originalMapperId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getMosipCurrentState() {
		if (_mosipCurrentState == null) {
			return "";
		}
		else {
			return _mosipCurrentState;
		}
	}

	@Override
	public void setMosipCurrentState(String mosipCurrentState) {
		_columnBitmask |= MOSIPCURRENTSTATE_COLUMN_BITMASK;

		if (_originalMosipCurrentState == null) {
			_originalMosipCurrentState = _mosipCurrentState;
		}

		_mosipCurrentState = mosipCurrentState;
	}

	public String getOriginalMosipCurrentState() {
		return GetterUtil.getString(_originalMosipCurrentState);
	}

	@JSON
	@Override
	public String getMosipDocumentType() {
		if (_mosipDocumentType == null) {
			return "";
		}
		else {
			return _mosipDocumentType;
		}
	}

	@Override
	public void setMosipDocumentType(String mosipDocumentType) {
		_columnBitmask |= MOSIPDOCUMENTTYPE_COLUMN_BITMASK;

		if (_originalMosipDocumentType == null) {
			_originalMosipDocumentType = _mosipDocumentType;
		}

		_mosipDocumentType = mosipDocumentType;
	}

	public String getOriginalMosipDocumentType() {
		return GetterUtil.getString(_originalMosipDocumentType);
	}

	@JSON
	@Override
	public String getRegistrationId() {
		if (_registrationId == null) {
			return "";
		}
		else {
			return _registrationId;
		}
	}

	@Override
	public void setRegistrationId(String registrationId) {
		_columnBitmask |= REGISTRATIONID_COLUMN_BITMASK;

		if (_originalRegistrationId == null) {
			_originalRegistrationId = _registrationId;
		}

		_registrationId = registrationId;
	}

	public String getOriginalRegistrationId() {
		return GetterUtil.getString(_originalRegistrationId);
	}

	@JSON
	@Override
	public long getResourceId() {
		return _resourceId;
	}

	@Override
	public void setResourceId(long resourceId) {
		_columnBitmask |= RESOURCEID_COLUMN_BITMASK;

		if (!_setOriginalResourceId) {
			_setOriginalResourceId = true;

			_originalResourceId = _resourceId;
		}

		_resourceId = resourceId;
	}

	public long getOriginalResourceId() {
		return _originalResourceId;
	}

	@JSON
	@Override
	public String getDocumentTitle() {
		if (_documentTitle == null) {
			return "";
		}
		else {
			return _documentTitle;
		}
	}

	@Override
	public void setDocumentTitle(String documentTitle) {
		_columnBitmask |= DOCUMENTTITLE_COLUMN_BITMASK;

		if (_originalDocumentTitle == null) {
			_originalDocumentTitle = _documentTitle;
		}

		_documentTitle = documentTitle;
	}

	public String getOriginalDocumentTitle() {
		return GetterUtil.getString(_originalDocumentTitle);
	}

	@JSON
	@Override
	public int getActiveState() {
		return _activeState;
	}

	@Override
	public void setActiveState(int activeState) {
		_activeState = activeState;
	}

	@JSON
	@Override
	public String getFileEntryId() {
		if (_fileEntryId == null) {
			return "";
		}
		else {
			return _fileEntryId;
		}
	}

	@Override
	public void setFileEntryId(String fileEntryId) {
		_columnBitmask |= FILEENTRYID_COLUMN_BITMASK;

		if (_originalFileEntryId == null) {
			_originalFileEntryId = _fileEntryId;
		}

		_fileEntryId = fileEntryId;
	}

	public String getOriginalFileEntryId() {
		return GetterUtil.getString(_originalFileEntryId);
	}

	@JSON
	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_columnBitmask |= UPDATEDATE_COLUMN_BITMASK;

		if (_originalUpdateDate == null) {
			_originalUpdateDate = _updateDate;
		}

		_updateDate = updateDate;
	}

	public Date getOriginalUpdateDate() {
		return _originalUpdateDate;
	}

	@JSON
	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return "";
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_columnBitmask |= UPDATEDBY_COLUMN_BITMASK;

		if (_originalUpdatedBy == null) {
			_originalUpdatedBy = _updatedBy;
		}

		_updatedBy = updatedBy;
	}

	public String getOriginalUpdatedBy() {
		return GetterUtil.getString(_originalUpdatedBy);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MOIIdMapper.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MOIIdMapper toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MOIIdMapper>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MOIIdMapperImpl moiIdMapperImpl = new MOIIdMapperImpl();

		moiIdMapperImpl.setMapperId(getMapperId());
		moiIdMapperImpl.setGroupId(getGroupId());
		moiIdMapperImpl.setCompanyId(getCompanyId());
		moiIdMapperImpl.setMosipCurrentState(getMosipCurrentState());
		moiIdMapperImpl.setMosipDocumentType(getMosipDocumentType());
		moiIdMapperImpl.setRegistrationId(getRegistrationId());
		moiIdMapperImpl.setResourceId(getResourceId());
		moiIdMapperImpl.setDocumentTitle(getDocumentTitle());
		moiIdMapperImpl.setActiveState(getActiveState());
		moiIdMapperImpl.setFileEntryId(getFileEntryId());
		moiIdMapperImpl.setUpdateDate(getUpdateDate());
		moiIdMapperImpl.setUpdatedBy(getUpdatedBy());

		moiIdMapperImpl.resetOriginalValues();

		return moiIdMapperImpl;
	}

	@Override
	public int compareTo(MOIIdMapper moiIdMapper) {
		int value = 0;

		if (getMapperId() < moiIdMapper.getMapperId()) {
			value = -1;
		}
		else if (getMapperId() > moiIdMapper.getMapperId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MOIIdMapper)) {
			return false;
		}

		MOIIdMapper moiIdMapper = (MOIIdMapper)object;

		long primaryKey = moiIdMapper.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalMapperId = _mapperId;

		_setOriginalMapperId = false;

		_originalMosipCurrentState = _mosipCurrentState;

		_originalMosipDocumentType = _mosipDocumentType;

		_originalRegistrationId = _registrationId;

		_originalResourceId = _resourceId;

		_setOriginalResourceId = false;

		_originalDocumentTitle = _documentTitle;

		_originalFileEntryId = _fileEntryId;

		_originalUpdateDate = _updateDate;

		_originalUpdatedBy = _updatedBy;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MOIIdMapper> toCacheModel() {
		MOIIdMapperCacheModel moiIdMapperCacheModel =
			new MOIIdMapperCacheModel();

		moiIdMapperCacheModel.mapperId = getMapperId();

		moiIdMapperCacheModel.groupId = getGroupId();

		moiIdMapperCacheModel.companyId = getCompanyId();

		moiIdMapperCacheModel.mosipCurrentState = getMosipCurrentState();

		String mosipCurrentState = moiIdMapperCacheModel.mosipCurrentState;

		if ((mosipCurrentState != null) && (mosipCurrentState.length() == 0)) {
			moiIdMapperCacheModel.mosipCurrentState = null;
		}

		moiIdMapperCacheModel.mosipDocumentType = getMosipDocumentType();

		String mosipDocumentType = moiIdMapperCacheModel.mosipDocumentType;

		if ((mosipDocumentType != null) && (mosipDocumentType.length() == 0)) {
			moiIdMapperCacheModel.mosipDocumentType = null;
		}

		moiIdMapperCacheModel.registrationId = getRegistrationId();

		String registrationId = moiIdMapperCacheModel.registrationId;

		if ((registrationId != null) && (registrationId.length() == 0)) {
			moiIdMapperCacheModel.registrationId = null;
		}

		moiIdMapperCacheModel.resourceId = getResourceId();

		moiIdMapperCacheModel.documentTitle = getDocumentTitle();

		String documentTitle = moiIdMapperCacheModel.documentTitle;

		if ((documentTitle != null) && (documentTitle.length() == 0)) {
			moiIdMapperCacheModel.documentTitle = null;
		}

		moiIdMapperCacheModel.activeState = getActiveState();

		moiIdMapperCacheModel.fileEntryId = getFileEntryId();

		String fileEntryId = moiIdMapperCacheModel.fileEntryId;

		if ((fileEntryId != null) && (fileEntryId.length() == 0)) {
			moiIdMapperCacheModel.fileEntryId = null;
		}

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			moiIdMapperCacheModel.updateDate = updateDate.getTime();
		}
		else {
			moiIdMapperCacheModel.updateDate = Long.MIN_VALUE;
		}

		moiIdMapperCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = moiIdMapperCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			moiIdMapperCacheModel.updatedBy = null;
		}

		return moiIdMapperCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MOIIdMapper, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MOIIdMapper, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOIIdMapper, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((MOIIdMapper)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MOIIdMapper, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MOIIdMapper, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MOIIdMapper, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MOIIdMapper)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MOIIdMapper>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mapperId;
	private long _originalMapperId;
	private boolean _setOriginalMapperId;
	private long _groupId;
	private long _companyId;
	private String _mosipCurrentState;
	private String _originalMosipCurrentState;
	private String _mosipDocumentType;
	private String _originalMosipDocumentType;
	private String _registrationId;
	private String _originalRegistrationId;
	private long _resourceId;
	private long _originalResourceId;
	private boolean _setOriginalResourceId;
	private String _documentTitle;
	private String _originalDocumentTitle;
	private int _activeState;
	private String _fileEntryId;
	private String _originalFileEntryId;
	private Date _updateDate;
	private Date _originalUpdateDate;
	private String _updatedBy;
	private String _originalUpdatedBy;
	private long _columnBitmask;
	private MOIIdMapper _escapedModel;

}